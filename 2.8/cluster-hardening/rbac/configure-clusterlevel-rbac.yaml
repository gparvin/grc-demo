# This is a sample policy to demonstrate configuring  RBAC for managed clusters using admin and view-only roles
# This Policy considers that below groups needs to be pre-existing before the policy can be configured.
#   Groups:  acm-admins, ac-viewonly-users
#   Group acm-admins to have admin access to all managed clusters
#   Group ac-viewonly-users to have view-only access to all managed clusters
# ManagedclusterX refers to the name of any managed cluster
# This Policy Configures the following rbac model for the above scenario
#   UsersGroups:  acm-admins, ac-viewonly-users
#   Rolebindings:
#     acm-admins group has cluster-admin access to all managed clusters including the hub cluster
#     ac-viewonly-users group has view-only access to all managed clusters including the hub cluster

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'mc-view-clusterX'
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: ac-viewonly-users
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'open-cluster-management:view:clusterX'
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'ns-view-clusterX'
  namespace: clusterX
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: ac-viewonly-users
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mc-admin-clusterX
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: acm-admins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'open-cluster-management:admin:clusterX'
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'ns-admin-clusterX'
  namespace: clusterX
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: acm-admins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin   
